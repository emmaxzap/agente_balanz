# balanz_daily_report_scraper.py - Scraper para el reporte diario de Balanz
import time
from datetime import datetime, date
from typing import Dict, Optional
import re

class BalanzDailyReportScraper:
    def __init__(self, page):
        self.page = page
        self.report_url = "https://balanz.com/reportes/daily/"
    
    def get_daily_market_report(self) -> Dict:
        """Obtiene el reporte diario completo de Balanz"""
        try:
            print("üìä OBTENIENDO REPORTE DIARIO DE BALANZ...")
            print("-" * 50)
            
            # 1. Navegar al reporte
            print(f"üåê Navegando a: {self.report_url}")
            self.page.goto(self.report_url, wait_until='networkidle')
            time.sleep(3)
            
            # 2. Buscar y expandir el reporte completo
            full_report_text = self._expand_and_extract_report()
            
            if not full_report_text:
                print("‚ùå No se pudo obtener el texto del reporte")
                return {}
            
            # 3. Procesar y estructurar el contenido
            structured_report = self._parse_report_content(full_report_text)
            
            # 4. Extraer insights espec√≠ficos para tu cartera
            portfolio_insights = self._extract_portfolio_specific_insights(structured_report)
            
            print(f"‚úÖ Reporte diario extra√≠do: {len(full_report_text)} caracteres")
            print(f"üìä Secciones identificadas: {len(structured_report)}")
            
            return {
                'fecha': date.today().isoformat(),
                'timestamp': datetime.now().isoformat(),
                'full_text': full_report_text,
                'structured_content': structured_report,
                'portfolio_insights': portfolio_insights,
                'data_source': 'balanz_daily_report'
            }
            
        except Exception as e:
            print(f"‚ùå Error obteniendo reporte de Balanz: {str(e)}")
            return {}
    
    def _expand_and_extract_report(self) -> str:
        """Expande el reporte y extrae el texto completo"""
        try:
            # Buscar el bot√≥n "Ver m√°s" o "S√≠ntesis de mercado"
            print("üîç Buscando bot√≥n de expansi√≥n...")
            
            # M√©todo 1: Buscar "Ver m√°s"
            ver_mas_selectors = [
                'a:has-text("Ver m√°s")',
                'button:has-text("Ver m√°s")',
                '.ver-mas',
                '[class*="ver-mas"]'
            ]
            
            expand_button = None
            for selector in ver_mas_selectors:
                elements = self.page.locator(selector)
                if elements.count() > 0:
                    expand_button = elements.first
                    print(f"‚úÖ Bot√≥n 'Ver m√°s' encontrado: {selector}")
                    break
            
            # M√©todo 2: Buscar "S√≠ntesis de mercado"
            if not expand_button:
                print("üîç Buscando bot√≥n 'S√≠ntesis de mercado'...")
                
                sintesis_selectors = [
                    'button:has-text("S√≠ntesis de mercado")',
                    '.btn-custom:has-text("S√≠ntesis de mercado")',
                    '.download-report:has-text("S√≠ntesis de mercado")'
                ]
                
                for selector in sintesis_selectors:
                    elements = self.page.locator(selector)
                    if elements.count() > 0:
                        expand_button = elements.first
                        print(f"‚úÖ Bot√≥n 'S√≠ntesis de mercado' encontrado: {selector}")
                        break
            
            # M√©todo 3: Buscar por la estructura espec√≠fica que mencionaste
            if not expand_button:
                print("üîç Buscando por estructura espec√≠fica...")
                try:
                    # <div class="py-3 row"><button type="button" id="" class="btn-custom btn btn-secondary download-report">S√≠ntesis de mercado</button></div>
                    specific_button = self.page.locator('div.py-3.row button.btn-custom.btn.btn-secondary.download-report')
                    if specific_button.count() > 0:
                        expand_button = specific_button.first
                        print("‚úÖ Bot√≥n encontrado por estructura espec√≠fica")
                except Exception as e:
                    print(f"‚ö†Ô∏è Error buscando estructura espec√≠fica: {str(e)}")
            
            # Si encontramos el bot√≥n, hacer click
            if expand_button:
                print("üñ±Ô∏è Haciendo click para expandir reporte...")
                expand_button.click()
                time.sleep(3)  # Esperar que se expanda el contenido
                print("‚úÖ Reporte expandido")
            else:
                print("‚ö†Ô∏è No se encontr√≥ bot√≥n de expansi√≥n - extrayendo contenido visible")
            
            # Extraer todo el texto del reporte
            report_text = self._extract_full_report_text()
            return report_text
            
        except Exception as e:
            print(f"‚ùå Error expandiendo reporte: {str(e)}")
            return ""
    
    def _extract_full_report_text(self) -> str:
        """Extrae el texto completo del reporte expandido"""
        try:
            # Buscar contenedores t√≠picos de contenido de reportes
            content_selectors = [
                '.blnz-article',  # Estructura que viste en tus documentos
                '.article-content',
                '.report-content',
                '.daily-report',
                'article',
                '.content'
            ]
            
            report_text = ""
            
            for selector in content_selectors:
                elements = self.page.locator(selector)
                if elements.count() > 0:
                    for i in range(elements.count()):
                        element = elements.nth(i)
                        if element.is_visible():
                            text = element.text_content().strip()
                            if len(text) > 200:  # Solo contenido sustancial
                                report_text += text + "\n\n"
                                print(f"‚úÖ Texto extra√≠do de {selector}: {len(text)} caracteres")
            
            # Si no encontramos contenido espec√≠fico, extraer de body general
            if not report_text:
                print("üîç Extrayendo contenido general...")
                body_text = self.page.locator('body').text_content()
                
                # Filtrar para quedarnos solo con contenido relevante del reporte
                lines = body_text.split('\n')
                relevant_lines = []
                
                for line in lines:
                    line = line.strip()
                    # Filtrar l√≠neas que parecen contenido del reporte
                    if (len(line) > 50 and 
                        any(keyword in line.lower() for keyword in 
                            ['merval', 'renta', 'bonos', 'd√≥lar', 'acciones', 'sector', '%']) and
                        not any(nav_word in line.lower() for nav_word in 
                               ['navegaci√≥n', 'men√∫', 'copyright', 'cookies', 'pol√≠tica'])):
                        relevant_lines.append(line)
                
                report_text = '\n'.join(relevant_lines)
            
            # Limpiar texto
            report_text = self._clean_report_text(report_text)
            
            return report_text
            
        except Exception as e:
            print(f"‚ùå Error extrayendo texto del reporte: {str(e)}")
            return ""
    
    def _clean_report_text(self, text: str) -> str:
        """Limpia y mejora el formato del texto del reporte"""
        if not text:
            return ""
        
        # Remover elementos no deseados
        text = re.sub(r'Ver menos.*?$', '', text, flags=re.MULTILINE)
        text = re.sub(r'Descargar.*?$', '', text, flags=re.MULTILINE)
        text = re.sub(r'\s+', ' ', text)  # Normalizar espacios
        
        # Mejorar formato
        text = text.replace('. ', '.\n')  # Un p√°rrafo por oraci√≥n para mejor an√°lisis
        text = re.sub(r'\n\s*\n', '\n\n', text)  # Normalizar saltos de l√≠nea
        
        return text.strip()
    
    def _parse_report_content(self, report_text: str) -> Dict:
        """Parsea el contenido del reporte en secciones estructuradas"""
        try:
            sections = {}
            
            # Identificar secciones principales basadas en el reporte que compartiste
            section_patterns = {
                'renta_variable': r'(?i)(renta variable.*?)(?=renta fija|macroeconom√≠a|internacional|$)',
                'renta_fija_soberana': r'(?i)(renta fija soberana.*?)(?=renta fija corporativa|renta fija en pesos|$)',
                'renta_fija_corporativa': r'(?i)(renta fija corporativa.*?)(?=renta fija en pesos|tipos de cambio|$)',
                'tipos_cambio': r'(?i)(tipos de cambio.*?)(?=macroeconom√≠a|internacional|$)',
                'macroeconomia': r'(?i)(macroeconom√≠a.*?)(?=internacional|$)',
                'internacional': r'(?i)(internacional.*?)$'
            }
            
            for section_name, pattern in section_patterns.items():
                match = re.search(pattern, report_text, re.DOTALL)
                if match:
                    sections[section_name] = match.group(1).strip()
                    print(f"üìã Secci√≥n '{section_name}' identificada: {len(match.group(1))} caracteres")
            
            # Si no se pudieron identificar secciones, usar texto completo
            if not sections:
                sections['contenido_completo'] = report_text
                print("üìã Usando contenido completo como secci√≥n √∫nica")
            
            return sections
            
        except Exception as e:
            print(f"‚ùå Error parseando contenido: {str(e)}")
            return {'contenido_completo': report_text}
    
    def _extract_portfolio_specific_insights(self, structured_report: Dict) -> Dict:
        """Extrae insights espec√≠ficos para tu cartera actual"""
        insights = {
            'tickers_mencionados': {},
            'sectores_destacados': {},
            'sentiment_general': 'neutral',
            'market_drivers': [],
            'risk_factors': []
        }
        
        try:
            # Tickers de tu cartera actual
            your_tickers = ['ALUA', 'COME', 'EDN', 'METR', 'TECO2']
            
            full_text = ' '.join(structured_report.values()).lower()
            
            # Buscar menciones espec√≠ficas de tus activos
            for ticker in your_tickers:
                ticker_pattern = rf'{ticker.lower()}.*?([+-]?\d+\.?\d*%)'
                matches = re.findall(ticker_pattern, full_text)
                
                if matches:
                    insights['tickers_mencionados'][ticker] = {
                        'mencionado': True,
                        'performance_reportada': matches[0] if matches else None,
                        'contexto': self._extract_ticker_context(ticker, full_text)
                    }
                    print(f"üìä {ticker} mencionado en reporte: {matches[0] if matches else 'Sin performance espec√≠fica'}")
            
            # An√°lisis de sentiment general
            positive_words = ['avanz√≥', 'subas', 'recuperaron', 'positivo', 'buena', 'destacadas']
            negative_words = ['retrocedi√≥', 'bajas', 'cay√≥', 'negativo', 'deterioro', 'd√©ficit']
            
            positive_count = sum(full_text.count(word) for word in positive_words)
            negative_count = sum(full_text.count(word) for word in negative_words)
            
            if positive_count > negative_count * 1.3:
                insights['sentiment_general'] = 'positivo'
            elif negative_count > positive_count * 1.3:
                insights['sentiment_general'] = 'negativo'
            else:
                insights['sentiment_general'] = 'mixto'
            
            print(f"üìä Sentiment general del reporte: {insights['sentiment_general']}")
            
            # Extraer drivers principales del mercado
            drivers = []
            if 'merval avanz√≥' in full_text:
                drivers.append('Merval positivo')
            if 'contexto regional positivo' in full_text:
                drivers.append('Contexto regional favorable')
            if 'bonos' in full_text and 'recuperaron' in full_text:
                drivers.append('Recuperaci√≥n en bonos')
            
            insights['market_drivers'] = drivers
            
            return insights
            
        except Exception as e:
            print(f"‚ùå Error extrayendo insights: {str(e)}")
            return insights
    
    def _extract_ticker_context(self, ticker: str, full_text: str) -> str:
        """Extrae el contexto espec√≠fico de un ticker en el reporte"""
        try:
            # Buscar oraciones que mencionen el ticker
            sentences = full_text.split('.')
            
            for sentence in sentences:
                if ticker.lower() in sentence:
                    # Limpiar y retornar la oraci√≥n completa
                    clean_sentence = sentence.strip()
                    if len(clean_sentence) > 10:
                        return clean_sentence[:200] + "..." if len(clean_sentence) > 200 else clean_sentence
            
            return "Mencionado sin contexto espec√≠fico"
            
        except Exception as e:
            return f"Error extrayendo contexto: {str(e)}"
    
    def generate_enhanced_prompt_with_report(self, portfolio_data: Dict, report_data: Dict) -> str:
        """Genera prompt enriquecido con el reporte diario"""
        if not report_data:
            return ""
        
        enhanced_prompt = f"""CONTEXTO DE MERCADO ACTUAL (Reporte Balanz de hoy):

AN√ÅLISIS DIARIO DE BALANZ - {report_data.get('fecha', 'N/A')}:
{'-' * 60}

"""
        
        # Agregar secciones del reporte
        structured_content = report_data.get('structured_content', {})
        
        if 'renta_variable' in structured_content:
            enhanced_prompt += f"RENTA VARIABLE:\n{structured_content['renta_variable']}\n\n"
        
        if 'tipos_cambio' in structured_content:
            enhanced_prompt += f"TIPOS DE CAMBIO:\n{structured_content['tipos_cambio']}\n\n"
        
        if 'macroeconomia' in structured_content:
            enhanced_prompt += f"MACROECONOM√çA:\n{structured_content['macroeconomia']}\n\n"
        
        # Insights espec√≠ficos para tu cartera
        portfolio_insights = report_data.get('portfolio_insights', {})
        
        if portfolio_insights.get('tickers_mencionados'):
            enhanced_prompt += "IMPACTO EN TU CARTERA:\n"
            enhanced_prompt += "-" * 30 + "\n"
            
            for ticker, info in portfolio_insights['tickers_mencionados'].items():
                if info['mencionado']:
                    performance = info.get('performance_reportada', 'N/A')
                    contexto = info.get('contexto', 'Sin contexto')
                    enhanced_prompt += f"‚Ä¢ {ticker}: {performance} - {contexto}\n"
            
            enhanced_prompt += "\n"
        
        enhanced_prompt += f"SENTIMENT GENERAL DEL MERCADO: {portfolio_insights.get('sentiment_general', 'neutral').upper()}\n"
        enhanced_prompt += f"DRIVERS PRINCIPALES: {', '.join(portfolio_insights.get('market_drivers', []))}\n\n"
        
        enhanced_prompt += """INSTRUCCIONES:
Usa este contexto de mercado REAL de hoy para:
1. Ajustar tus recomendaciones t√©cnicas seg√∫n el ambiente actual
2. Considerar el sentiment general del mercado argentino
3. Tomar en cuenta menciones espec√≠ficas de activos de la cartera
4. Evaluar si el contexto regional/internacional afecta tus decisiones

"""
        
        return enhanced_prompt
    
    def save_report_to_db(self, report_data: Dict, db_manager) -> bool:
        """Guarda el reporte en la base de datos"""
        try:
            if not report_data or not db_manager:
                return False
            
            report_record = {
                'fecha': report_data['fecha'],
                'full_text': report_data['full_text'][:2000],  # Limitar tama√±o
                'sentiment_general': report_data['portfolio_insights'].get('sentiment_general', 'neutral'),
                'tickers_mencionados': list(report_data['portfolio_insights'].get('tickers_mencionados', {}).keys()),
                'market_drivers': report_data['portfolio_insights'].get('market_drivers', []),
                'sections_count': len(report_data.get('structured_content', {})),
                'data_quality': 'complete' if len(report_data['full_text']) > 1000 else 'partial'
            }
            
            # Crear tabla si no existe
            # CREATE TABLE daily_reports (
            #     id SERIAL PRIMARY KEY,
            #     fecha DATE NOT NULL UNIQUE,
            #     full_text TEXT,
            #     sentiment_general VARCHAR(20),
            #     tickers_mencionados TEXT[],
            #     market_drivers TEXT[],
            #     sections_count INTEGER,
            #     data_quality VARCHAR(20),
            #     created_at TIMESTAMP DEFAULT NOW()
            # );
            
            result = db_manager.supabase.table('daily_reports').upsert(report_record).execute()
            
            print("‚úÖ Reporte diario guardado en BD")
            return True
            
        except Exception as e:
            print(f"‚ùå Error guardando reporte: {str(e)}")
            return False

# INTEGRACI√ìN CON TU AN√ÅLISIS EXISTENTE
class EnhancedPortfolioAnalyzerWithReport:
    def __init__(self, page, db_manager):
        self.page = page
        self.db = db_manager
        self.report_scraper = BalanzDailyReportScraper(page)
    
    def run_enhanced_analysis_with_market_context(self, portfolio_data: Dict) -> Dict:
        """Ejecuta an√°lisis enriquecido con contexto del reporte diario"""
        try:
            print("üöÄ AN√ÅLISIS ENRIQUECIDO CON REPORTE DE MERCADO")
            print("=" * 60)
            
            # 1. Obtener reporte diario actual
            daily_report = self.report_scraper.get_daily_market_report()
            
            # 2. Tu an√°lisis t√©cnico existente
            from claude_portfolio_agent import ClaudePortfolioAgent
            claude_agent = ClaudePortfolioAgent(self.db, self.page)
            
            # 3. Generar an√°lisis con contexto de mercado
            if daily_report:
                print("üìä Integrando reporte de mercado con an√°lisis t√©cnico...")
                
                # Crear prompt enriquecido
                market_context_prompt = self.report_scraper.generate_enhanced_prompt_with_report(
                    portfolio_data, daily_report
                )
                
                # Agregar el contexto al an√°lisis
                enhanced_analysis = self._run_claude_analysis_with_market_context(
                    claude_agent, portfolio_data, market_context_prompt
                )
                
                return {
                    'base_analysis': enhanced_analysis,
                    'market_report': daily_report,
                    'enhanced_with_market_context': True,
                    'context_quality': 'high'
                }
            else:
                print("‚ö†Ô∏è Sin reporte de mercado - usando an√°lisis est√°ndar")
                standard_analysis = claude_agent.analyze_portfolio_with_expert_agent(
                    portfolio_data, portfolio_data.get('dinero_disponible', 0)
                )
                
                return {
                    'base_analysis': standard_analysis,
                    'market_report': {},
                    'enhanced_with_market_context': False,
                    'context_quality': 'standard'
                }
                
        except Exception as e:
            print(f"‚ùå Error en an√°lisis enriquecido: {str(e)}")
            return {}
    
    def _run_claude_analysis_with_market_context(self, claude_agent, portfolio_data: Dict, market_context: str) -> Dict:
        """Ejecuta Claude con contexto de mercado adicional"""
        try:
            # Modificar temporalmente el prompt de Claude para incluir contexto
            original_method = claude_agent._create_expert_prompt_improved
            
            def enhanced_prompt_method(data):
                original_prompt = original_method(data)
                return market_context + "\n\n" + original_prompt
            
            # Reemplazar m√©todo temporalmente
            claude_agent._create_expert_prompt_improved = enhanced_prompt_method
            
            # Ejecutar an√°lisis con contexto
            enhanced_analysis = claude_agent.analyze_portfolio_with_expert_agent(
                portfolio_data, portfolio_data.get('dinero_disponible', 0)
            )
            
            # Restaurar m√©todo original
            claude_agent._create_expert_prompt_improved = original_method
            
            return enhanced_analysis
            
        except Exception as e:
            print(f"‚ùå Error ejecutando an√°lisis con contexto: {str(e)}")
            return {}

# FUNCI√ìN DE TESTING
def test_balanz_report_scraper():
    """Funci√≥n para probar el scraper del reporte"""
    print("üß™ PROBANDO SCRAPER DE REPORTE BALANZ")
    print("=" * 50)
    
    # Necesitar√≠as una instancia de p√°gina de Playwright
    print("‚ö†Ô∏è Para probar necesitas:")
    print("1. Una sesi√≥n activa de Playwright")
    print("2. Modificar tu main.py para incluir este scraper")
    print("3. O crear un script independiente con navegador")
    
    print("\nüí° IMPLEMENTACI√ìN SUGERIDA:")
    print("Agregar al final de tu login exitoso en main.py:")
    print("""
    # Despu√©s del login exitoso
    from balanz_daily_report_scraper import BalanzDailyReportScraper
    
    report_scraper = BalanzDailyReportScraper(scraper.page)
    daily_report = report_scraper.get_daily_market_report()
    
    # Usar en tu an√°lisis
    if daily_report:
        print("‚úÖ Reporte de mercado obtenido - an√°lisis mejorado")
    """)

if __name__ == "__main__":
    test_balanz_report_scraper()