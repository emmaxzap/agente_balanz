# test_integration.py - Para probar la integraci√≥n completa
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from scraper.web_scraper import WebScraperPlaywright
from config import LOGIN_CONFIG
from database.database_manager import SupabaseManager

def test_complete_integration():
    """Prueba la integraci√≥n completa del nuevo sistema"""
    
    print("üß™ PROBANDO INTEGRACI√ìN COMPLETA v3.0")
    print("=" * 60)
    print("üìã Tests: Login ‚Üí Reporte ‚Üí Ratios ‚Üí An√°lisis integral")
    print("=" * 60)
    
    scraper = WebScraperPlaywright(headless=False)
    test_results = {
        'login': False,
        'daily_report': False,
        'financial_ratios': False,
        'comprehensive_analysis': False,
        'overall_success': False
    }
    
    try:
        # 1. INICIAR NAVEGADOR Y LOGIN
        print("\nüîß PASO 1: INICIANDO NAVEGADOR Y LOGIN")
        print("-" * 45)
        
        scraper.start_browser()
        print("‚úÖ Navegador iniciado")
        
        login_success = scraper.login(
            LOGIN_CONFIG['url'],
            LOGIN_CONFIG['username'], 
            LOGIN_CONFIG['password']
        )
        
        if not login_success:
            print("‚ùå Login fall√≥ - no se puede continuar con tests")
            return test_results
        
        print("‚úÖ Login exitoso - continuando con tests...")
        test_results['login'] = True
        
        # 2. PROBAR REPORTE DIARIO
        print("\nüìä PASO 2: PROBANDO REPORTE DIARIO DE BALANZ")
        print("-" * 50)
        
        try:
            from balanz_daily_report_scraper import BalanzDailyReportScraper
            
            report_scraper = BalanzDailyReportScraper(scraper.page)
            daily_report = report_scraper.get_daily_market_report()
            
            if daily_report and 'full_text' in daily_report:
                print("‚úÖ Reporte diario extra√≠do exitosamente")
                print(f"   üìä Texto extra√≠do: {len(daily_report['full_text'])} caracteres")
                print(f"   üìä Secciones: {len(daily_report.get('structured_content', {}))}")
                
                # Verificar insights de cartera
                portfolio_insights = daily_report.get('portfolio_insights', {})
                tickers_mencionados = portfolio_insights.get('tickers_mencionados', {})
                
                if tickers_mencionados:
                    print(f"   üéØ Insights de tu cartera:")
                    for ticker, info in tickers_mencionados.items():
                        if info.get('mencionado'):
                            print(f"      ‚Ä¢ {ticker}: {info.get('performance_reportada', 'Sin performance')}")
                
                test_results['daily_report'] = True
            else:
                print("‚ùå No se pudo obtener reporte diario")
                print("   üìã Estructura obtenida:", list(daily_report.keys()) if daily_report else "Vac√≠o")
                
        except ImportError:
            print("‚ùå BalanzDailyReportScraper no disponible")
        except Exception as e:
            print(f"‚ùå Error probando reporte diario: {str(e)}")
        
        # 3. PROBAR RATIOS FINANCIEROS
        print("\nüìä PASO 3: PROBANDO RATIOS FINANCIEROS")
        print("-" * 45)
        
        try:
            from financial_ratios_scraper import FinancialRatiosScraper
            
            ratios_scraper = FinancialRatiosScraper(scraper.page)
            
            # Probar con algunos tickers de tu cartera
            test_tickers = ['ALUA', 'COME', 'EDN', 'METR', 'TECO2']
            ratios_data = ratios_scraper.get_financial_ratios_for_tickers(test_tickers)
            
            if ratios_data and 'ratios_by_ticker' in ratios_data:
                ratios_found = len(ratios_data['ratios_by_ticker'])
                print(f"‚úÖ Ratios financieros extra√≠dos: {ratios_found} activos")
                
                # Mostrar muestra de ratios
                for ticker, ratios in list(ratios_data['ratios_by_ticker'].items())[:3]:
                    pe = ratios.get('pe', 'N/A')
                    roe = ratios.get('roe', 'N/A')
                    score = ratios.get('fundamental_score', 'N/A')
                    print(f"   üìä {ticker}: P/E={pe}, ROE={roe}, Score={score}")
                
                test_results['financial_ratios'] = True
            else:
                print("‚ùå No se pudieron obtener ratios financieros")
                
        except ImportError:
            print("‚ùå FinancialRatiosScraper no disponible")
        except Exception as e:
            print(f"‚ùå Error probando ratios: {str(e)}")
        
        # 4. PROBAR AN√ÅLISIS INTEGRAL COMPLETO
        print("\nüåç PASO 4: PROBANDO AN√ÅLISIS INTEGRAL")
        print("-" * 45)
        
        try:
            # Crear datos de cartera simulados para test
            test_portfolio_data = create_test_portfolio_data()
            
            from comprehensive_market_analyzer import ComprehensiveMarketAnalyzer
            
            comprehensive_analyzer = ComprehensiveMarketAnalyzer(scraper.page, SupabaseManager())
            
            print("üîç Ejecutando an√°lisis integral...")
            integral_result = comprehensive_analyzer.run_comprehensive_analysis(test_portfolio_data)
            
            if integral_result:
                print("‚úÖ An√°lisis integral ejecutado")
                
                # Verificar componentes
                has_market_report = bool(integral_result.get('market_report'))
                has_enhanced_portfolio = bool(integral_result.get('portfolio_data'))
                has_analysis = bool(integral_result.get('comprehensive_analysis'))
                
                print(f"   üì∞ Reporte de mercado: {'‚úÖ' if has_market_report else '‚ùå'}")
                print(f"   üìä Portfolio enriquecido: {'‚úÖ' if has_enhanced_portfolio else '‚ùå'}")
                print(f"   ü§ñ An√°lisis Claude: {'‚úÖ' if has_analysis else '‚ùå'}")
                
                if has_market_report and has_enhanced_portfolio and has_analysis:
                    test_results['comprehensive_analysis'] = True
                    print("‚úÖ An√°lisis integral COMPLETO")
                else:
                    print("‚ö†Ô∏è An√°lisis integral PARCIAL")
                
            else:
                print("‚ùå An√°lisis integral fall√≥ completamente")
                
        except ImportError as e:
            print(f"‚ùå ComprehensiveMarketAnalyzer no disponible: {str(e)}")
        except Exception as e:
            print(f"‚ùå Error probando an√°lisis integral: {str(e)}")
        
        # 5. EVALUACI√ìN FINAL
        print(f"\nüìä RESUMEN DE TESTS")
        print("=" * 30)
        
        tests_passed = sum(test_results.values())
        total_tests = len(test_results) - 1  # Excluir 'overall_success'
        
        for test_name, result in test_results.items():
            if test_name != 'overall_success':
                status = "‚úÖ" if result else "‚ùå"
                print(f"{status} {test_name.replace('_', ' ').title()}: {'Funcionando' if result else 'Con problemas'}")
        
        success_rate = tests_passed / total_tests
        test_results['overall_success'] = success_rate >= 0.5
        
        print(f"\nüéØ RESULTADO GENERAL:")
        if success_rate >= 0.75:
            print(f"üéâ EXCELENTE: {tests_passed}/{total_tests} tests funcionando")
            print("‚úÖ Sistema integral listo para usar")
        elif success_rate >= 0.5:
            print(f"‚úÖ BUENO: {tests_passed}/{total_tests} tests funcionando")
            print("‚ö†Ô∏è Sistema funcional con algunos componentes limitados")
        else:
            print(f"‚ö†Ô∏è LIMITADO: {tests_passed}/{total_tests} tests funcionando")
            print("üîß Requiere ajustes antes de usar modo integral")
        
        return test_results
        
    except Exception as e:
        print(f"\n‚ùå Error general en testing: {str(e)}")
        import traceback
        traceback.print_exc()
        return test_results
    
    finally:
        print("\nüîß Cerrando navegador...")
        scraper.close()
        print("‚úÖ Navegador cerrado")

def create_test_portfolio_data():
    """Crea datos de cartera simulados para testing"""
    return {
        'dinero_disponible': 50000.0,
        'valor_total_cartera': 150000.0,
        'total_invertido': 140000.0,
        'ganancia_perdida_total': 10000.0,
        'activos': [
            {
                'ticker': 'ALUA',
                'cantidad': 100,
                'valor_actual_total': 45000.0,
                'valor_inicial_total': 40000.0,
                'precio_actual_unitario': 450.0,
                'precio_inicial_unitario': 400.0,
                'ganancia_perdida_total': 5000.0,
                'ganancia_perdida_porcentaje': 12.5,
                'dias_tenencia': 15
            },
            {
                'ticker': 'COME',
                'cantidad': 200,
                'valor_actual_total': 60000.0,
                'valor_inicial_total': 55000.0,
                'precio_actual_unitario': 300.0,
                'precio_inicial_unitario': 275.0,
                'ganancia_perdida_total': 5000.0,
                'ganancia_perdida_porcentaje': 9.1,
                'dias_tenencia': 8
            },
            {
                'ticker': 'EDN',
                'cantidad': 150,
                'valor_actual_total': 45000.0,
                'valor_inicial_total': 45000.0,
                'precio_actual_unitario': 300.0,
                'precio_inicial_unitario': 300.0,
                'ganancia_perdida_total': 0.0,
                'ganancia_perdida_porcentaje': 0.0,
                'dias_tenencia': 3
            }
        ]
    }

def test_individual_components():
    """Prueba componentes individuales sin necesidad de login"""
    print("\nüß™ PROBANDO COMPONENTES INDIVIDUALES")
    print("=" * 50)
    
    # 1. Test base de datos
    print("\n1Ô∏è‚É£ PROBANDO CONEXI√ìN A BASE DE DATOS:")
    try:
        db = SupabaseManager()
        if db.test_connection():
            print("‚úÖ Conexi√≥n a Supabase funcionando")
            
            # Probar queries b√°sicas
            activos_df = db.obtener_resumen_activos()
            if not activos_df.empty:
                print(f"‚úÖ Base de datos tiene {len(activos_df)} activos registrados")
            else:
                print("‚ö†Ô∏è Base de datos sin activos - necesita datos iniciales")
                
        else:
            print("‚ùå Error de conexi√≥n a Supabase")
            
    except Exception as e:
        print(f"‚ùå Error probando BD: {str(e)}")
    
    # 2. Test an√°lisis financiero
    print("\n2Ô∏è‚É£ PROBANDO AN√ÅLISIS FINANCIERO:")
    try:
        from analysis.financial_analyzer import FinancialAnalyzer
        
        db = SupabaseManager()
        analyzer = FinancialAnalyzer(db)
        
        # Probar an√°lisis de un activo conocido
        test_ticker = 'AAPL'
        analysis = analyzer.analyze_asset_for_decision(test_ticker, 150.0)
        
        if analysis and analysis.get('recommendation'):
            print(f"‚úÖ An√°lisis financiero funcionando")
            print(f"   üìä {test_ticker}: {analysis['recommendation']} (confianza: {analysis.get('confidence', 0)}%)")
            print(f"   üìä Razones: {analysis.get('reasons', [])[:2]}")
        else:
            print("‚ùå An√°lisis financiero no genera resultados")
            
    except Exception as e:
        print(f"‚ùå Error probando an√°lisis: {str(e)}")
    
    # 3. Test configuraci√≥n de Claude
    print("\n3Ô∏è‚É£ PROBANDO CONFIGURACI√ìN DE CLAUDE:")
    try:
        import os
        api_key = os.getenv('ANTHROPIC_API_KEY')
        
        if api_key:
            print(f"‚úÖ API Key configurada: {api_key[:10]}...")
            
            # Test b√°sico de Claude
            from claude_portfolio_agent import ClaudePortfolioAgent
            
            claude_agent = ClaudePortfolioAgent(SupabaseManager())
            
            # Test con datos m√≠nimos
            test_data = create_test_portfolio_data()
            print("üîç Probando consulta a Claude...")
            
            # Solo probar si la configuraci√≥n es correcta
            if hasattr(claude_agent, 'client'):
                print("‚úÖ Cliente de Claude inicializado correctamente")
            else:
                print("‚ùå Cliente de Claude no inicializado")
                
        else:
            print("‚ùå ANTHROPIC_API_KEY no configurada")
            print("üí° Agrega tu API key en el archivo .env:")
            print("   ANTHROPIC_API_KEY=sk-ant-...")
            
    except Exception as e:
        print(f"‚ùå Error probando Claude: {str(e)}")
    
    # 4. Test notificaciones
    print("\n4Ô∏è‚É£ PROBANDO NOTIFICACIONES:")
    try:
        # WhatsApp
        from scraper.notifications.whatsapp_notifier import WhatsAppNotifier
        
        whatsapp = WhatsAppNotifier()
        if whatsapp.is_configured:
            print("‚úÖ WhatsApp configurado correctamente")
        else:
            print("‚ö†Ô∏è WhatsApp no configurado")
        
        # Email
        from scraper.notifications.email_notifier import EmailNotifier
        
        email = EmailNotifier()
        if email.is_configured:
            print("‚úÖ Email configurado correctamente")
        else:
            print("‚ö†Ô∏è Email no configurado")
            
    except Exception as e:
        print(f"‚ùå Error probando notificaciones: {str(e)}")

def test_scrapers_with_login():
    """Prueba los scrapers espec√≠ficos con login"""
    print("\nüß™ PROBANDO SCRAPERS ESPEC√çFICOS")
    print("=" * 50)
    
    scraper = WebScraperPlaywright(headless=False)
    
    try:
        # Iniciar y hacer login
        scraper.start_browser()
        
        login_success = scraper.login(
            LOGIN_CONFIG['url'],
            LOGIN_CONFIG['username'], 
            LOGIN_CONFIG['password']
        )
        
        if not login_success:
            print("‚ùå Login fall√≥")
            return False
        
        print("‚úÖ Login exitoso - probando scrapers...")
        
        # 1. Probar reporte diario
        print("\nüì∞ PROBANDO REPORTE DIARIO:")
        print("-" * 30)
        
        try:
            from balanz_daily_report_scraper import BalanzDailyReportScraper
            
            report_scraper = BalanzDailyReportScraper(scraper.page)
            daily_report = report_scraper.get_daily_market_report()
            
            if daily_report:
                print("‚úÖ Reporte diario extra√≠do")
                
                # An√°lisis del contenido
                full_text = daily_report.get('full_text', '')
                if len(full_text) > 500:
                    print(f"‚úÖ Contenido sustancial: {len(full_text)} caracteres")
                    
                    # Buscar menciones de tus activos
                    your_tickers = ['ALUA', 'COME', 'EDN', 'METR', 'TECO2']
                    mentions = []
                    
                    for ticker in your_tickers:
                        if ticker.lower() in full_text.lower():
                            mentions.append(ticker)
                    
                    if mentions:
                        print(f"üéØ Tus activos mencionados: {mentions}")
                    else:
                        print("üìä Ninguno de tus activos mencionado espec√≠ficamente")
                
                else:
                    print("‚ö†Ô∏è Contenido extra√≠do muy corto")
            else:
                print("‚ùå No se pudo extraer reporte")
                
        except Exception as e:
            print(f"‚ùå Error en reporte diario: {str(e)}")
        
        # 2. Probar ratios financieros
        print("\nüìä PROBANDO RATIOS FINANCIEROS:")
        print("-" * 30)
        
        try:
            from financial_ratios_scraper import FinancialRatiosScraper
            
            ratios_scraper = FinancialRatiosScraper(scraper.page)
            
            # Probar con 2-3 tickers para no tardar mucho
            test_tickers = ['ALUA', 'COME']
            print(f"üîç Probando ratios para: {test_tickers}")
            
            ratios_data = ratios_scraper.get_financial_ratios_for_tickers(test_tickers)
            
            if ratios_data and 'ratios_by_ticker' in ratios_data:
                print("‚úÖ Ratios extra√≠dos exitosamente")
                
                for ticker, ratios in ratios_data['ratios_by_ticker'].items():
                    print(f"üìä {ticker}:")
                    print(f"   P/E: {ratios.get('pe', 'N/A')}")
                    print(f"   ROE: {ratios.get('roe', 'N/A')}%")
                    print(f"   Debt/Equity: {ratios.get('debt_to_equity', 'N/A')}")
                    print(f"   Score fundamental: {ratios.get('fundamental_score', 'N/A')}/100")
                    print(f"   Categor√≠a: {ratios.get('valuation_category', 'N/A')}")
            else:
                print("‚ùå No se pudieron extraer ratios")
                
        except Exception as e:
            print(f"‚ùå Error en ratios: {str(e)}")
        
        # 3. Probar cartera
        print("\nüíº PROBANDO EXTRACCI√ìN DE CARTERA:")
        print("-" * 30)
        
        try:
            from scraper.cartera_extractor import CarteraExtractor
            
            cartera_extractor = CarteraExtractor(scraper.page)
            portfolio_data = cartera_extractor.extract_portfolio_data()
            
            if portfolio_data:
                print("‚úÖ Cartera extra√≠da exitosamente")
                print(f"   üí∞ Dinero disponible: ${portfolio_data.get('dinero_disponible', 0):,.2f}")
                print(f"   üìä Activos: {len(portfolio_data.get('activos', []))}")
                
                # Mostrar activos
                for activo in portfolio_data.get('activos', [])[:3]:
                    ticker = activo.get('ticker', 'N/A')
                    dias = activo.get('dias_tenencia', 0)
                    pnl_pct = activo.get('ganancia_perdida_porcentaje', 0)
                    print(f"   üìà {ticker}: {dias} d√≠as, {pnl_pct:+.1f}%")
            else:
                print("‚ùå No se pudo extraer cartera")
                
        except Exception as e:
            print(f"‚ùå Error extrayendo cartera: {str(e)}")
        
        print("\nüéâ TESTING DE SCRAPERS COMPLETADO")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error general: {str(e)}")
        return False
    
    finally:
        scraper.close()

def test_macro_data():
    """Prueba la recolecci√≥n de datos macroecon√≥micos"""
    print("\nüåç PROBANDO DATOS MACROECON√ìMICOS")
    print("=" * 45)
    
    try:
        from test_macro_data import MacroDataCollectorFixed
        
        collector = MacroDataCollectorFixed()
        snapshot = collector.get_current_macro_snapshot()
        
        if snapshot:
            print("‚úÖ Datos macro obtenidos")
            
            # Verificar cada componente
            dolar_data = snapshot.get('dolar_data', {})
            if dolar_data:
                blue_price = dolar_data.get('blue_sell', 0)
                brecha = dolar_data.get('brecha', 0)
                print(f"   üíµ D√≥lar blue: ${blue_price:.0f} (brecha: {brecha:+.1f}%)")
            
            riesgo_pais = snapshot.get('riesgo_pais')
            if riesgo_pais:
                print(f"   üìà Riesgo pa√≠s: {riesgo_pais:.0f} pb")
            
            # Implicaciones para inversi√≥n
            print("\nüí° IMPLICACIONES PARA INVERSI√ìN:")
            implications = collector.get_macro_investment_implications()
            
            portfolio_adjustments = implications['implications'].get('portfolio_adjustments', [])
            if portfolio_adjustments:
                for adj in portfolio_adjustments[:2]:
                    print(f"   ‚Ä¢ {adj}")
            
            sector_prefs = implications['implications'].get('sector_preferences', [])
            if sector_prefs:
                for pref in sector_prefs[:2]:
                    print(f"   ‚Ä¢ {pref}")
            
            return True
        else:
            print("‚ùå No se pudieron obtener datos macro")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando datos macro: {str(e)}")
        return False

def run_quick_test():
    """Test r√°pido sin login para verificar imports y configuraci√≥n b√°sica"""
    print("‚ö° QUICK TEST - SIN LOGIN")
    print("=" * 30)
    
    issues_found = []
    components_ok = 0
    total_components = 6
    
    # 1. Test imports b√°sicos
    print("1Ô∏è‚É£ Imports b√°sicos...")
    try:
        from database.database_manager import SupabaseManager
        from analysis.financial_analyzer import FinancialAnalyzer
        from advanced_portfolio_manager import AdvancedPortfolioManager
        print("‚úÖ Imports core funcionando")
        components_ok += 1
    except Exception as e:
        print(f"‚ùå Error imports core: {str(e)}")
        issues_found.append("Imports b√°sicos fallan")
    
    # 2. Test configuraci√≥n BD
    print("2Ô∏è‚É£ Configuraci√≥n BD...")
    try:
        db = SupabaseManager()
        if db.test_connection():
            print("‚úÖ Base de datos accesible")
            components_ok += 1
        else:
            print("‚ùå Base de datos no accesible")
            issues_found.append("Conexi√≥n Supabase falla")
    except Exception as e:
        print(f"‚ùå Error BD: {str(e)}")
        issues_found.append("Configuraci√≥n Supabase incorrecta")
    
    # 3. Test configuraci√≥n Claude
    print("3Ô∏è‚É£ Configuraci√≥n Claude...")
    try:
        import os
        api_key = os.getenv('ANTHROPIC_API_KEY')
        if api_key and len(api_key) > 20:
            print("‚úÖ API Key Claude configurada")
            components_ok += 1
        else:
            print("‚ùå API Key Claude no configurada")
            issues_found.append("ANTHROPIC_API_KEY faltante en .env")
    except Exception as e:
        print(f"‚ùå Error Claude config: {str(e)}")
        issues_found.append("Error en configuraci√≥n Claude")
    
    # 4. Test imports nuevos
    print("4Ô∏è‚É£ Nuevos m√≥dulos...")
    try:
        from balanz_daily_report_scraper import BalanzDailyReportScraper
        from financial_ratios_scraper import FinancialRatiosScraper
        from comprehensive_market_analyzer import ComprehensiveMarketAnalyzer
        print("‚úÖ M√≥dulos de an√°lisis integral disponibles")
        components_ok += 1
    except Exception as e:
        print(f"‚ùå Error imports nuevos: {str(e)}")
        issues_found.append("M√≥dulos nuevos no disponibles")
    
    # 5. Test notificaciones
    print("5Ô∏è‚É£ Notificaciones...")
    try:
        from scraper.notifications.whatsapp_notifier import WhatsAppNotifier
        from scraper.notifications.email_notifier import EmailNotifier
        
        whatsapp = WhatsAppNotifier()
        email = EmailNotifier()
        
        notif_count = sum([whatsapp.is_configured, email.is_configured])
        
        if notif_count >= 1:
            print(f"‚úÖ Al menos 1 canal de notificaci√≥n configurado")
            components_ok += 1
        else:
            print("‚ö†Ô∏è Notificaciones no configuradas")
            issues_found.append("WhatsApp y Email no configurados")
            
    except Exception as e:
        print(f"‚ùå Error notificaciones: {str(e)}")
        issues_found.append("M√≥dulos de notificaci√≥n con problemas")
    
    # 6. Test dependencies
    print("6Ô∏è‚É£ Dependencias...")
    try:
        import pandas as pd
        import numpy as np
        import anthropic
        import playwright
        print("‚úÖ Dependencias principales instaladas")
        components_ok += 1
    except Exception as e:
        print(f"‚ùå Error dependencias: {str(e)}")
        issues_found.append("Dependencias faltantes")
    
    # Resumen
    print(f"\nüìä RESUMEN QUICK TEST:")
    print("=" * 25)
    print(f"‚úÖ Componentes OK: {components_ok}/{total_components}")
    
    if issues_found:
        print(f"‚ùå Problemas encontrados:")
        for issue in issues_found:
            print(f"   ‚Ä¢ {issue}")
    
    if components_ok >= total_components * 0.8:
        print(f"\nüéâ SISTEMA LISTO PARA USAR")
        print("üí° Ejecuta: python test_integration.py --full")
    elif components_ok >= total_components * 0.5:
        print(f"\n‚ö†Ô∏è SISTEMA PARCIALMENTE FUNCIONAL")
        print("üí° Soluciona los problemas y vuelve a probar")
    else:
        print(f"\n‚ùå SISTEMA NECESITA CONFIGURACI√ìN")
        print("üí° Revisa el archivo .env y las dependencias")
    
    return components_ok >= total_components * 0.5

def main():
    """Funci√≥n principal de testing"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Test de integraci√≥n del sistema Balanz')
    parser.add_argument('--full', action='store_true', help='Test completo con login')
    parser.add_argument('--quick', action='store_true', help='Test r√°pido sin login')
    parser.add_argument('--scrapers', action='store_true', help='Test solo scrapers')
    parser.add_argument('--macro', action='store_true', help='Test solo datos macro')
    
    args = parser.parse_args()
    
    if args.quick:
        return run_quick_test()
    elif args.scrapers:
        return test_scrapers_with_login()
    elif args.macro:
        return test_macro_data()
    elif args.full:
        return test_complete_integration()
    else:
        # Por defecto: quick test
        print("üöÄ EJECUTANDO QUICK TEST (usa --full para test completo)")
        return run_quick_test()

if __name__ == "__main__":
    try:
        success = main()
        
        if success:
            print(f"\nüéâ Testing completado exitosamente")
            print("üí° El sistema est√° listo para usar")
        else:
            print(f"\n‚ö†Ô∏è Testing completado con problemas")
            print("üí° Revisa los errores y vuelve a intentar")
            
        sys.exit(0 if success else 1)
        
    except KeyboardInterrupt:
        print("\n\nüëã Testing interrumpido por el usuario")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico en testing: {str(e)}")
        import traceback
        traceback.print_exc()
        sys.exit(1)